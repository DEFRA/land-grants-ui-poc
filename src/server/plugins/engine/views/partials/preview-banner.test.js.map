{"version":3,"file":"preview-banner.test.js","names":["FormStatus","renderView","describe","each","status","Draft","Live","$component","$paragraphs","beforeEach","container","context","previewMode","isForceAccess","relevantPages","title","getByRole","getAllByRole","it","expect","toBeInTheDocument","toContainElement","toHaveClass","toHaveLength","toHaveAccessibleName","toHaveTextContent","toBeUndefined"],"sources":["../../../../../../src/server/plugins/engine/views/partials/preview-banner.test.js"],"sourcesContent":["import { FormStatus } from '~/src/server/routes/types.js'\nimport { renderView } from '~/test/helpers/component-helpers.js'\n\ndescribe('Preview banner partial', () => {\n  describe.each([\n    {\n      status: FormStatus.Draft\n    },\n    {\n      status: FormStatus.Live\n    }\n  ])('Status: $status', ({ status }) => {\n    let $component = /** @type {HTMLElement | null} */ (null)\n    let $paragraphs = /** @type {HTMLElement[]} */ ([])\n\n    describe('Form preview', () => {\n      beforeEach(() => {\n        const { container } = renderView('partials/preview-banner.html', {\n          context: {\n            previewMode: status,\n            context: {\n              isForceAccess: false,\n              relevantPages: [{ title: 'Page 1' }]\n            }\n          }\n        })\n\n        $component = container.getByRole('region')\n        $paragraphs = container.getAllByRole('paragraph')\n      })\n\n      it('should render contents', () => {\n        expect($component).toBeInTheDocument()\n        expect($component).toContainElement($paragraphs[0])\n        expect($component).toHaveClass('govuk-notification-banner')\n\n        expect($paragraphs).toHaveLength(1)\n        expect($paragraphs[0]).toHaveClass('govuk-notification-banner__heading')\n      })\n\n      it('should have accessible name', () => {\n        expect($component).toHaveAccessibleName('Important')\n      })\n\n      it('should have text content', () => {\n        expect($paragraphs[0]).toHaveTextContent(\n          `This is a preview of a ${status} form. Do not enter personal information.`\n        )\n      })\n    })\n\n    describe('Preview URL direct access', () => {\n      beforeEach(() => {\n        const { container } = renderView('partials/preview-banner.html', {\n          context: {\n            previewMode: status,\n            context: {\n              isForceAccess: true,\n              relevantPages: [{ title: 'Page 1' }]\n            }\n          }\n        })\n\n        $component = container.getByRole('region')\n        $paragraphs = container.getAllByRole('paragraph')\n      })\n\n      it('should have text content', () => {\n        expect($paragraphs[0]).toHaveTextContent(\n          `This is a preview of a ${status} form page you are editing.`\n        )\n\n        expect($paragraphs[1]).toBeUndefined()\n      })\n    })\n\n    describe('Preview URL direct access (with previous pages)', () => {\n      beforeEach(() => {\n        const { container } = renderView('partials/preview-banner.html', {\n          context: {\n            previewMode: status,\n            context: {\n              isForceAccess: true,\n              relevantPages: [\n                { title: 'Page 1' },\n                { title: 'Page 2' },\n                { title: 'Page 3' }\n              ]\n            }\n          }\n        })\n\n        $component = container.getByRole('region')\n        $paragraphs = container.getAllByRole('paragraph')\n      })\n\n      it('should render contents', () => {\n        expect($component).toBeInTheDocument()\n        expect($component).toContainElement($paragraphs[0])\n        expect($component).toHaveClass('govuk-notification-banner')\n\n        expect($paragraphs).toHaveLength(2)\n        expect($paragraphs[0]).toHaveClass('govuk-notification-banner__heading')\n        expect($paragraphs[1]).toHaveClass('govuk-body')\n      })\n\n      it('should have accessible name', () => {\n        expect($component).toHaveAccessibleName('Important')\n      })\n\n      it('should have text content', () => {\n        expect($paragraphs[0]).toHaveTextContent(\n          `This is a preview of a ${status} form page you are editing.`\n        )\n\n        expect($paragraphs[1]).toHaveTextContent(\n          'It depends on answers from earlier pages in the form. In the live version, users will need to complete those questions first.'\n        )\n      })\n    })\n  })\n})\n"],"mappings":"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","ignoreList":[]}