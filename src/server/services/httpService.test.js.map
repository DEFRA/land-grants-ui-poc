{"version":3,"file":"httpService.test.js","names":["Boom","Wreck","StatusCodes","get","getJson","post","postJson","put","describe","options","beforeEach","jest","spyOn","mockResolvedValue","res","statusCode","OK","payload","undefined","it","expect","resolves","toEqual","toHaveBeenCalledWith","json","error","notFound","NOT_FOUND","Error","reference"],"sources":["../../../src/server/services/httpService.test.js"],"sourcesContent":["import Boom from '@hapi/boom'\nimport Wreck from '@hapi/wreck'\nimport { StatusCodes } from 'http-status-codes'\n\nimport {\n  get,\n  getJson,\n  post,\n  postJson,\n  put\n} from '~/src/server/services/httpService.js'\n\ndescribe('HTTP service', () => {\n  /** @type {RequestOptions} */\n  let options\n\n  beforeEach(() => {\n    options = {}\n  })\n\n  describe('GET', () => {\n    beforeEach(() => {\n      jest.spyOn(Wreck, 'get').mockResolvedValue({\n        res: /** @type {IncomingMessage} */ ({\n          statusCode: StatusCodes.OK\n        }),\n        payload: undefined\n      })\n    })\n\n    it('sends request', async () => {\n      await expect(get('/test', options)).resolves.toEqual({\n        res: { statusCode: StatusCodes.OK }\n      })\n\n      expect(Wreck.get).toHaveBeenCalledWith('/test', {})\n    })\n\n    it('sends request as JSON', async () => {\n      await expect(getJson('/test')).resolves.toEqual({\n        res: { statusCode: StatusCodes.OK }\n      })\n\n      expect(Wreck.get).toHaveBeenCalledWith('/test', { json: true })\n    })\n  })\n\n  describe('GET (with error)', () => {\n    const error = Boom.notFound()\n\n    beforeEach(() => {\n      jest.spyOn(Wreck, 'get').mockResolvedValue({\n        res: /** @type {IncomingMessage} */ ({\n          statusCode: StatusCodes.NOT_FOUND\n        }),\n        payload: error\n      })\n    })\n\n    it('sends request (with error)', async () => {\n      await expect(get('/error', options)).resolves.toEqual({\n        res: { statusCode: StatusCodes.NOT_FOUND },\n        error\n      })\n\n      expect(Wreck.get).toHaveBeenCalledWith('/error', {})\n    })\n\n    it('sends request as JSON (with error)', async () => {\n      await expect(getJson('/error')).resolves.toEqual({\n        res: { statusCode: StatusCodes.NOT_FOUND },\n        error\n      })\n\n      expect(Wreck.get).toHaveBeenCalledWith('/error', { json: true })\n    })\n\n    it('sends request (unknown error)', async () => {\n      jest.spyOn(Wreck, 'get').mockResolvedValue({\n        res: /** @type {IncomingMessage} */ ({\n          statusCode: StatusCodes.NOT_FOUND\n        }),\n        payload: undefined\n      })\n\n      await expect(get('/error', options)).resolves.toEqual({\n        res: { statusCode: StatusCodes.NOT_FOUND },\n        error: new Error('Unknown error')\n      })\n\n      expect(Wreck.get).toHaveBeenCalledWith('/error', {})\n    })\n  })\n\n  describe('POST', () => {\n    beforeEach(() => {\n      jest.spyOn(Wreck, 'post').mockResolvedValue({\n        res: /** @type {IncomingMessage} */ ({\n          statusCode: StatusCodes.OK\n        }),\n        payload: { reference: '1234' }\n      })\n    })\n\n    it('sends request', async () => {\n      await expect(post('/test', options)).resolves.toEqual({\n        res: { statusCode: StatusCodes.OK },\n        payload: { reference: '1234' }\n      })\n\n      expect(Wreck.post).toHaveBeenCalledWith('/test', {})\n    })\n\n    it('sends request as JSON', async () => {\n      await expect(postJson('/test', options)).resolves.toEqual({\n        res: { statusCode: StatusCodes.OK },\n        payload: { reference: '1234' }\n      })\n\n      expect(Wreck.post).toHaveBeenCalledWith('/test', { json: true })\n    })\n  })\n\n  describe('POST (with error)', () => {\n    const error = Boom.notFound()\n\n    beforeEach(() => {\n      jest.spyOn(Wreck, 'post').mockResolvedValue({\n        res: /** @type {IncomingMessage} */ ({\n          statusCode: StatusCodes.NOT_FOUND\n        }),\n        payload: error\n      })\n    })\n\n    it('sends request (with error)', async () => {\n      await expect(post('/error', options)).resolves.toEqual({\n        res: { statusCode: StatusCodes.NOT_FOUND },\n        error\n      })\n\n      expect(Wreck.post).toHaveBeenCalledWith('/error', {})\n    })\n\n    it('sends request as JSON (with error)', async () => {\n      await expect(postJson('/error', options)).resolves.toEqual({\n        res: { statusCode: StatusCodes.NOT_FOUND },\n        error\n      })\n\n      expect(Wreck.post).toHaveBeenCalledWith('/error', { json: true })\n    })\n\n    it('sends request (unknown error)', async () => {\n      jest.spyOn(Wreck, 'post').mockResolvedValue({\n        res: /** @type {IncomingMessage} */ ({\n          statusCode: StatusCodes.NOT_FOUND\n        }),\n        payload: undefined\n      })\n\n      await expect(post('/error', options)).resolves.toEqual({\n        res: { statusCode: StatusCodes.NOT_FOUND },\n        error: new Error('Unknown error')\n      })\n\n      expect(Wreck.post).toHaveBeenCalledWith('/error', {})\n    })\n  })\n\n  describe('PUT', () => {\n    beforeEach(() => {\n      jest.spyOn(Wreck, 'put').mockResolvedValue({\n        res: /** @type {IncomingMessage} */ ({\n          statusCode: StatusCodes.OK\n        }),\n        payload: undefined\n      })\n    })\n\n    it('sends request', async () => {\n      await expect(put('/test', options)).resolves.toEqual({\n        res: { statusCode: StatusCodes.OK }\n      })\n\n      expect(Wreck.put).toHaveBeenCalledWith('/test', {})\n    })\n  })\n\n  describe('PUT (with error)', () => {\n    const error = Boom.notFound()\n\n    beforeEach(() => {\n      jest.spyOn(Wreck, 'put').mockResolvedValue({\n        res: /** @type {IncomingMessage} */ ({\n          statusCode: StatusCodes.NOT_FOUND\n        }),\n        payload: error\n      })\n    })\n\n    it('sends request (with error)', async () => {\n      await expect(put('/error', options)).resolves.toEqual({\n        res: { statusCode: StatusCodes.NOT_FOUND },\n        error\n      })\n\n      expect(Wreck.put).toHaveBeenCalledWith('/error', {})\n    })\n\n    it('sends request (unknown error)', async () => {\n      jest.spyOn(Wreck, 'put').mockResolvedValue({\n        res: /** @type {IncomingMessage} */ ({\n          statusCode: StatusCodes.NOT_FOUND\n        }),\n        payload: undefined\n      })\n\n      await expect(put('/error', options)).resolves.toEqual({\n        res: { statusCode: StatusCodes.NOT_FOUND },\n        error: new Error('Unknown error')\n      })\n\n      expect(Wreck.put).toHaveBeenCalledWith('/error', {})\n    })\n  })\n})\n\n/**\n * @import { IncomingMessage } from 'node:http'\n * @import { RequestOptions } from '~/src/server/services/httpService.js'\n */\n"],"mappings":"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","ignoreList":[]}