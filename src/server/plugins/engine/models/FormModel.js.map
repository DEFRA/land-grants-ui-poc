{"version":3,"file":"FormModel.js","names":["ConditionsModel","ControllerPath","ControllerType","formDefinitionSchema","hasRepeater","add","Parser","joi","findPage","getError","getPage","createPage","validationOptions","opts","FormAction","merge","FormModel","def","lists","sections","name","values","basePath","conditions","pages","constructor","options","result","validate","abortEarly","error","structuredClone","value","push","title","type","items","text","forEach","conditionDef","condition","makeCondition","map","pageDef","some","controller","Status","path","makeSchema","makeFilteredSchema","relevantPages","schema","object","required","page","concat","collection","stateSchema","parser","operators","logical","Object","assign","functions","dateForComparison","timePeriod","timeUnit","Date","toISOString","displayName","expr","toConditionExpression","fn","evaluationState","ctx","toConditionContext","evaluate","context","key","defineProperty","get","from","parse","toExpression","getList","find","list","getFormContext","request","state","query","currentPath","startPath","getStartPath","isForceAccess","relevantState","payload","getFormDataFromState","paths","validateFormPayload","nextPage","getContextValueFromState","keys","getNextPath","validateFormState","errors","includes","action","getFormParams","Validate","formState","getStateFromValidForm","previousPages","filter","relevantPage","model","stripUnknown","errorsState","details"],"sources":["../../../../../src/server/plugins/engine/models/FormModel.ts"],"sourcesContent":["import {\n  ConditionsModel,\n  ControllerPath,\n  ControllerType,\n  formDefinitionSchema,\n  hasRepeater,\n  type ConditionWrapper,\n  type ConditionsModelData,\n  type DateUnits,\n  type FormDefinition,\n  type List\n} from '@defra/forms-model'\nimport { add } from 'date-fns'\nimport { Parser, type Value } from 'expr-eval'\nimport joi from 'joi'\n\nimport {\n  findPage,\n  getError,\n  getPage\n} from '~/src/server/plugins/engine/helpers.js'\nimport { type ExecutableCondition } from '~/src/server/plugins/engine/models/types.js'\nimport {\n  createPage,\n  type PageControllerClass\n} from '~/src/server/plugins/engine/pageControllers/helpers.js'\nimport { validationOptions as opts } from '~/src/server/plugins/engine/pageControllers/validationOptions.js'\nimport {\n  type FormContext,\n  type FormContextRequest,\n  type FormState,\n  type FormSubmissionState\n} from '~/src/server/plugins/engine/types.js'\nimport { FormAction } from '~/src/server/routes/types.js'\nimport { merge } from '~/src/server/services/cacheService.js'\n\nexport class FormModel {\n  /**\n   * Responsible for instantiating the {@link PageControllerClass} and condition context from a form JSON\n   */\n\n  /** the entire form JSON as an object */\n  def: FormDefinition\n\n  lists: FormDefinition['lists']\n  sections: FormDefinition['sections'] = []\n  name: string\n  values: FormDefinition\n  basePath: string\n  conditions: Partial<Record<string, ExecutableCondition>>\n  pages: PageControllerClass[]\n\n  constructor(def: typeof this.def, options: { basePath: string }) {\n    const result = formDefinitionSchema.validate(def, { abortEarly: false })\n\n    if (result.error) {\n      throw result.error\n    }\n\n    // Make a clone of the shallow copy returned\n    // by joi so as not to change the source data.\n    def = structuredClone(result.value)\n\n    // Add default lists\n    def.lists.push({\n      name: '__yesNo',\n      title: 'Yes/No',\n      type: 'boolean',\n      items: [\n        {\n          text: 'Yes',\n          value: true\n        },\n        {\n          text: 'No',\n          value: false\n        }\n      ]\n    })\n\n    this.def = def\n    this.lists = def.lists\n    this.sections = def.sections\n    this.name = def.name ?? ''\n    this.values = result.value\n    this.basePath = options.basePath\n    this.conditions = {}\n\n    def.conditions.forEach((conditionDef) => {\n      const condition = this.makeCondition(conditionDef)\n      this.conditions[condition.name] = condition\n    })\n\n    this.pages = def.pages.map((pageDef) => createPage(this, pageDef))\n\n    if (\n      !def.pages.some(\n        ({ controller }) =>\n          // Check for user-provided status page (optional)\n          controller === ControllerType.Status\n      )\n    ) {\n      this.pages.push(\n        createPage(this, {\n          title: 'Form submitted',\n          path: ControllerPath.Status,\n          controller: ControllerType.Status\n        })\n      )\n    }\n  }\n\n  /**\n   * build the entire model schema from individual pages/sections\n   */\n  makeSchema() {\n    return this.makeFilteredSchema(this.pages)\n  }\n\n  /**\n   * build the entire model schema from individual pages/sections and filter out answers\n   * for pages which are no longer accessible due to an answer that has been changed\n   */\n  makeFilteredSchema(relevantPages: PageControllerClass[]) {\n    // Build the entire model schema\n    // from the individual pages/sections\n    let schema = joi.object<FormSubmissionState>().required()\n\n    relevantPages.forEach((page) => {\n      schema = schema.concat(page.collection.stateSchema)\n    })\n\n    return schema\n  }\n\n  /**\n   * Instantiates a Condition based on {@link ConditionWrapper}\n   * @param condition\n   */\n  makeCondition(condition: ConditionWrapper): ExecutableCondition {\n    const parser = new Parser({\n      operators: {\n        logical: true\n      }\n    })\n\n    Object.assign(parser.functions, {\n      dateForComparison(timePeriod: number, timeUnit: DateUnits) {\n        return add(new Date(), { [timeUnit]: timePeriod }).toISOString()\n      }\n    })\n\n    const { name, displayName, value } = condition\n    const expr = this.toConditionExpression(value, parser)\n\n    const fn = (evaluationState: FormState) => {\n      const ctx = this.toConditionContext(evaluationState, this.conditions)\n      try {\n        return expr.evaluate(ctx) as boolean\n      } catch {\n        return false\n      }\n    }\n\n    return {\n      name,\n      displayName,\n      value,\n      expr,\n      fn\n    }\n  }\n\n  toConditionContext(\n    evaluationState: FormState,\n    conditions: Partial<Record<string, ExecutableCondition>>\n  ) {\n    const context = { ...evaluationState }\n\n    for (const key in conditions) {\n      Object.defineProperty(context, key, {\n        get() {\n          return conditions[key]?.fn(evaluationState)\n        }\n      })\n    }\n\n    return context as Extract<Value, Record<string, Value>>\n  }\n\n  toConditionExpression(value: ConditionsModelData, parser: Parser) {\n    const conditions = ConditionsModel.from(value)\n    return parser.parse(conditions.toExpression())\n  }\n\n  getList(name: string): List | undefined {\n    return this.lists.find((list) => list.name === name)\n  }\n\n  /**\n   * Form context for the current page\n   */\n  getFormContext(request: FormContextRequest, state: FormState): FormContext {\n    const { query } = request\n\n    const page = getPage(this, request)\n\n    // Determine form paths\n    const currentPath = page.path\n    const startPath = page.getStartPath()\n\n    // Preview URL direct access is allowed\n    const isForceAccess = 'force' in query\n\n    let context: FormContext = {\n      evaluationState: {},\n      relevantState: {},\n      relevantPages: [],\n      payload: page.getFormDataFromState(request, state),\n      state,\n      paths: [],\n      isForceAccess\n    }\n\n    // Validate current page\n    context = validateFormPayload(request, page, context)\n\n    // Find start page\n    let nextPage = findPage(this, startPath)\n\n    // Walk form pages from start\n    while (nextPage) {\n      const { collection, pageDef } = nextPage\n\n      // Add page to context\n      context.relevantPages.push(nextPage)\n\n      // Skip evaluation state for repeater pages\n      if (!hasRepeater(pageDef)) {\n        Object.assign(\n          context.evaluationState,\n          collection.getContextValueFromState(context.state)\n        )\n      }\n\n      // Copy relevant state by expected keys\n      for (const key of nextPage.keys) {\n        if (typeof context.state[key] !== 'undefined') {\n          context.relevantState[key] = context.state[key]\n        }\n      }\n\n      // Stop at current page\n      if (nextPage.path === currentPath) {\n        break\n      }\n\n      // Apply conditions to determine next page\n      nextPage = findPage(this, nextPage.getNextPath(context))\n    }\n\n    // Validate form state\n    context = validateFormState(request, page, context)\n\n    // Add paths for navigation\n    for (const { keys, path } of context.relevantPages) {\n      context.paths.push(path)\n\n      // Stop at page with errors\n      if (\n        context.errors?.some(({ name, path }) => {\n          return keys.includes(name) || keys.some((key) => path.includes(key))\n        })\n      ) {\n        break\n      }\n    }\n\n    return context\n  }\n}\n\n/**\n * Validate current page only\n */\nfunction validateFormPayload(\n  request: FormContextRequest,\n  page: PageControllerClass,\n  context: FormContext\n): FormContext {\n  const { collection } = page\n  const { payload, state } = context\n\n  const { action } = page.getFormParams(request)\n\n  // Skip validation GET requests or other actions\n  if (!request.payload || action !== FormAction.Validate) {\n    return context\n  }\n\n  // Validate form data into payload\n  const { value, errors } = collection.validate({\n    ...payload,\n    ...request.payload\n  })\n\n  // Add sanitised payload (ready to save)\n  const formState = page.getStateFromValidForm(request, state, value)\n\n  return {\n    ...context,\n    payload: merge(payload, value),\n    state: merge(state, formState),\n    errors\n  }\n}\n\n/**\n * Validate entire form state\n */\nfunction validateFormState(\n  request: FormContextRequest,\n  page: PageControllerClass,\n  context: FormContext\n): FormContext {\n  const { errors = [], relevantPages, relevantState } = context\n\n  // Exclude current page\n  const previousPages = relevantPages.filter(\n    (relevantPage) => relevantPage !== page\n  )\n\n  // Validate relevant state\n  const { error } = page.model\n    .makeFilteredSchema(previousPages)\n    .validate(relevantState, { ...opts, stripUnknown: true })\n\n  // Add relevant state errors\n  if (error) {\n    const errorsState = error.details.map(getError)\n    return { ...context, errors: errors.concat(errorsState) }\n  }\n\n  return context\n}\n"],"mappings":"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","ignoreList":[]}