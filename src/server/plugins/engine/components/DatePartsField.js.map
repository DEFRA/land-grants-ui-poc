{"version":3,"file":"DatePartsField.js","names":["ComponentType","add","format","isValid","parse","startOfToday","sub","ComponentCollection","FormComponent","isFormState","isFormValue","NumberField","messageTemplate","DatePartsField","constructor","def","props","name","options","isRequired","required","customValidationMessages","objectMissing","dateFormat","collection","type","title","schema","min","max","precision","optionalText","classes","parent","custom","getValidatorDate","peers","formSchema","stateSchema","getFormValueFromState","state","value","isState","undefined","getDisplayStringFromState","year","month","day","getContextValueFromState","getViewModel","payload","errors","viewModel","fieldset","label","hasError","some","error","items","map","model","errorMessage","toString","text","trim","id","legend","isDateParts","isNumber","component","validator","helpers","values","getStateFromValidForm","context","missing","keys","key","date","Date","dateMin","maxDaysInPast","days","dateMax","maxDaysInFuture","limit"],"sources":["../../../../../src/server/plugins/engine/components/DatePartsField.ts"],"sourcesContent":["import { ComponentType, type DatePartsFieldComponent } from '@defra/forms-model'\nimport { add, format, isValid, parse, startOfToday, sub } from 'date-fns'\nimport {\n  type Context,\n  type CustomValidator,\n  type LanguageMessages,\n  type ObjectSchema\n} from 'joi'\n\nimport { ComponentCollection } from '~/src/server/plugins/engine/components/ComponentCollection.js'\nimport {\n  FormComponent,\n  isFormState,\n  isFormValue\n} from '~/src/server/plugins/engine/components/FormComponent.js'\nimport { NumberField } from '~/src/server/plugins/engine/components/NumberField.js'\nimport { type DateInputItem } from '~/src/server/plugins/engine/components/types.js'\nimport { messageTemplate } from '~/src/server/plugins/engine/pageControllers/validationOptions.js'\nimport {\n  type FormPayload,\n  type FormState,\n  type FormStateValue,\n  type FormSubmissionError,\n  type FormSubmissionState\n} from '~/src/server/plugins/engine/types.js'\n\nexport class DatePartsField extends FormComponent {\n  declare options: DatePartsFieldComponent['options']\n  declare formSchema: ObjectSchema<FormPayload>\n  declare stateSchema: ObjectSchema<FormState>\n  declare collection: ComponentCollection\n\n  constructor(\n    def: DatePartsFieldComponent,\n    props: ConstructorParameters<typeof FormComponent>[1]\n  ) {\n    super(def, props)\n\n    const { name, options } = def\n\n    const isRequired = options.required !== false\n\n    const customValidationMessages: LanguageMessages = {\n      'any.required': messageTemplate.objectMissing,\n      'number.base': messageTemplate.objectMissing,\n      'number.precision': messageTemplate.dateFormat,\n      'number.integer': messageTemplate.dateFormat,\n      'number.unsafe': messageTemplate.dateFormat,\n      'number.min': messageTemplate.dateFormat,\n      'number.max': messageTemplate.dateFormat\n    }\n\n    this.collection = new ComponentCollection(\n      [\n        {\n          type: ComponentType.NumberField,\n          name: `${name}__day`,\n          title: 'Day',\n          schema: { min: 1, max: 31, precision: 0 },\n          options: {\n            required: isRequired,\n            optionalText: true,\n            classes: 'govuk-input--width-2',\n            customValidationMessages\n          }\n        },\n        {\n          type: ComponentType.NumberField,\n          name: `${name}__month`,\n          title: 'Month',\n          schema: { min: 1, max: 12, precision: 0 },\n          options: {\n            required: isRequired,\n            optionalText: true,\n            classes: 'govuk-input--width-2',\n            customValidationMessages\n          }\n        },\n        {\n          type: ComponentType.NumberField,\n          name: `${name}__year`,\n          title: 'Year',\n          schema: { min: 1000, max: 3000, precision: 0 },\n          options: {\n            required: isRequired,\n            optionalText: true,\n            classes: 'govuk-input--width-4',\n            customValidationMessages\n          }\n        }\n      ],\n      { ...props, parent: this },\n      {\n        custom: getValidatorDate(this),\n        peers: [`${name}__day`, `${name}__month`, `${name}__year`]\n      }\n    )\n\n    this.options = options\n    this.formSchema = this.collection.formSchema\n    this.stateSchema = this.collection.stateSchema\n  }\n\n  getFormValueFromState(state: FormSubmissionState) {\n    const value = super.getFormValueFromState(state)\n    return this.isState(value) ? value : undefined\n  }\n\n  getDisplayStringFromState(state: FormSubmissionState) {\n    const value = this.getFormValueFromState(state)\n\n    if (!value) {\n      return ''\n    }\n\n    return format(`${value.year}-${value.month}-${value.day}`, 'd MMMM yyyy')\n  }\n\n  getContextValueFromState(state: FormSubmissionState) {\n    const value = this.getFormValueFromState(state)\n\n    if (!value) {\n      return null\n    }\n\n    return format(`${value.year}-${value.month}-${value.day}`, 'yyyy-MM-dd')\n  }\n\n  getViewModel(payload: FormPayload, errors?: FormSubmissionError[]) {\n    const { collection, name } = this\n\n    const viewModel = super.getViewModel(payload, errors)\n    let { fieldset, label } = viewModel\n\n    // Check for component errors only\n    const hasError = errors?.some((error) => error.name === name)\n\n    // Use the component collection to generate the subitems\n    const items: DateInputItem[] = collection\n      .getViewModel(payload, errors)\n      .map(({ model }) => {\n        let { label, type, value, classes, errorMessage } = model\n\n        if (label) {\n          label.toString = () => label.text // Date component uses string labels\n        }\n\n        if (hasError || errorMessage) {\n          classes = `${classes} govuk-input--error`.trim()\n        }\n\n        // Allow any `toString()`-able value so non-numeric\n        // values are shown alongside their error messages\n        if (!isFormValue(value)) {\n          value = undefined\n        }\n\n        return {\n          label,\n          id: model.id,\n          name: model.name,\n          type,\n          value,\n          classes\n        }\n      })\n\n    fieldset ??= {\n      legend: {\n        text: label.text,\n        classes: 'govuk-fieldset__legend--m'\n      }\n    }\n\n    return {\n      ...viewModel,\n      fieldset,\n      items\n    }\n  }\n\n  isState(value?: FormStateValue | FormState) {\n    return DatePartsField.isDateParts(value)\n  }\n\n  static isDateParts(\n    value?: FormStateValue | FormState\n  ): value is DatePartsState {\n    return (\n      isFormState(value) &&\n      NumberField.isNumber(value.day) &&\n      NumberField.isNumber(value.month) &&\n      NumberField.isNumber(value.year)\n    )\n  }\n}\n\ninterface DatePartsState extends Record<string, number> {\n  day: number\n  month: number\n  year: number\n}\n\nexport function getValidatorDate(component: DatePartsField) {\n  const validator: CustomValidator = (payload: FormPayload, helpers) => {\n    const { collection, name, options } = component\n\n    const values = component.getFormValueFromState(\n      component.getStateFromValidForm(payload)\n    )\n\n    const context: Context = {\n      missing: collection.keys,\n      key: name\n    }\n\n    if (!component.isState(values)) {\n      return options.required !== false\n        ? helpers.error('object.required', context)\n        : payload\n    }\n\n    const date = parse(\n      `${values.year}-${values.month}-${values.day}`,\n      'yyyy-MM-dd',\n      new Date()\n    )\n\n    if (!isValid(date)) {\n      return helpers.error('date.format', context)\n    }\n\n    // Minimum date from today\n    const dateMin = options.maxDaysInPast\n      ? sub(startOfToday(), { days: options.maxDaysInPast })\n      : undefined\n\n    // Maximum date from today\n    const dateMax = options.maxDaysInFuture\n      ? add(startOfToday(), { days: options.maxDaysInFuture })\n      : undefined\n\n    if (dateMin && date < dateMin) {\n      return helpers.error('date.min', { ...context, limit: dateMin })\n    }\n\n    if (dateMax && date > dateMax) {\n      return helpers.error('date.max', { ...context, limit: dateMax })\n    }\n\n    return payload\n  }\n\n  return validator\n}\n"],"mappings":"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","ignoreList":[]}