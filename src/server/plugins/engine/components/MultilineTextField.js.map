{"version":3,"file":"MultilineTextField.js","names":["Joi","FormComponent","MultilineTextField","isCharacterOrWordCount","constructor","def","props","schema","options","title","formSchema","string","trim","label","toLowerCase","required","allow","length","max","min","maxWords","custom","getValidatorMaxWords","regex","pattern","RegExp","customValidationMessage","message","messages","customValidationMessages","default","stateSchema","getViewModel","payload","errors","viewModel","maxlength","maxwords","rows","component","validator","value","helpers","limit","count","error","text","tokens","match"],"sources":["../../../../../src/server/plugins/engine/components/MultilineTextField.ts"],"sourcesContent":["import { type MultilineTextFieldComponent } from '@defra/forms-model'\nimport Joi, { type CustomValidator, type StringSchema } from 'joi'\n\nimport { type ComponentBase } from '~/src/server/plugins/engine/components/ComponentBase.js'\nimport { FormComponent } from '~/src/server/plugins/engine/components/FormComponent.js'\nimport {\n  type FormPayload,\n  type FormSubmissionError\n} from '~/src/server/plugins/engine/types.js'\n\nexport class MultilineTextField extends FormComponent {\n  declare options: MultilineTextFieldComponent['options']\n  declare schema: MultilineTextFieldComponent['schema']\n  declare formSchema: StringSchema\n  declare stateSchema: StringSchema\n\n  isCharacterOrWordCount = false\n\n  constructor(\n    def: MultilineTextFieldComponent,\n    props: ConstructorParameters<typeof ComponentBase>[1]\n  ) {\n    super(def, props)\n\n    const { schema, options, title } = def\n\n    let formSchema = Joi.string().trim().label(title.toLowerCase()).required()\n\n    if (options.required === false) {\n      formSchema = formSchema.allow('')\n    }\n\n    if (typeof schema.length !== 'number') {\n      if (typeof schema.max === 'number') {\n        formSchema = formSchema.max(schema.max)\n        this.isCharacterOrWordCount = true\n      }\n\n      if (typeof schema.min === 'number') {\n        formSchema = formSchema.min(schema.min)\n      }\n    } else {\n      formSchema = formSchema.length(schema.length)\n    }\n\n    if (typeof options.maxWords === 'number') {\n      formSchema = formSchema.custom(\n        getValidatorMaxWords(this),\n        'max words validation'\n      )\n\n      this.isCharacterOrWordCount = true\n    }\n\n    if (schema.regex) {\n      const pattern = new RegExp(schema.regex)\n      formSchema = formSchema.pattern(pattern)\n    }\n\n    if (options.customValidationMessage) {\n      const message = options.customValidationMessage\n\n      formSchema = formSchema.messages({\n        'any.required': message,\n        'string.empty': message,\n        'string.max': message,\n        'string.min': message,\n        'string.length': message,\n        'string.pattern.base': message,\n        'string.maxWords': message\n      })\n    } else if (options.customValidationMessages) {\n      formSchema = formSchema.messages(options.customValidationMessages)\n    }\n\n    this.formSchema = formSchema.default('')\n    this.stateSchema = formSchema.default(null).allow(null)\n    this.options = options\n    this.schema = schema\n  }\n\n  getViewModel(payload: FormPayload, errors?: FormSubmissionError[]) {\n    const { schema, options, isCharacterOrWordCount } = this\n\n    const viewModel = super.getViewModel(payload, errors)\n    let { maxlength, maxwords, rows } = viewModel\n\n    if (schema.max) {\n      maxlength = schema.max\n    }\n\n    if (options.maxWords) {\n      maxwords = options.maxWords\n    }\n\n    if (options.rows) {\n      maxwords = options.rows\n    }\n\n    return {\n      ...viewModel,\n      isCharacterOrWordCount,\n      maxlength,\n      maxwords,\n      rows\n    }\n  }\n}\n\nfunction getValidatorMaxWords(component: MultilineTextField) {\n  const validator: CustomValidator = (value: string, helpers) => {\n    const { options } = component\n\n    const {\n      customValidationMessage: custom,\n      maxWords: limit // See {{#limit}} variable\n    } = options\n\n    if (!limit || count(value) <= limit) {\n      return value\n    }\n\n    return custom\n      ? helpers.message({ custom }, { limit })\n      : helpers.error('string.maxWords', { limit })\n  }\n\n  /**\n   * Count the number of words in the given text\n   * @see GOV.UK Frontend {@link https://github.com/alphagov/govuk-frontend/blob/v5.4.0/packages/govuk-frontend/src/govuk/components/character-count/character-count.mjs#L343 | Character count `maxwords` implementation}\n   */\n  function count(text: string) {\n    const tokens = text.match(/\\S+/g) ?? []\n    return tokens.length\n  }\n\n  return validator\n}\n"],"mappings":"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","ignoreList":[]}