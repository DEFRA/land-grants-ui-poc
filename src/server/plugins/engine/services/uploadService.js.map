{"version":3,"file":"uploadService.js","names":["config","getJson","postJson","uploaderUrl","get","submissionUrl","uploaderBucketName","stagingPrefix","initiateUpload","path","retrievalKey","mimeTypes","postJsonByType","payload","redirect","callback","s3Bucket","s3Path","metadata","split","map","type","trim","filter","initiate","getUploadStatus","uploadId","getJsonByType","status"],"sources":["../../../../../src/server/plugins/engine/services/uploadService.js"],"sourcesContent":["import { config } from '~/src/config/index.js'\nimport { getJson, postJson } from '~/src/server/services/httpService.js'\n\nconst uploaderUrl = config.get('uploaderUrl')\nconst submissionUrl = config.get('submissionUrl')\nconst uploaderBucketName = config.get('uploaderBucketName')\nconst stagingPrefix = config.get('stagingPrefix')\n\n/**\n * Initiates a CDP file upload\n * @param {string} path - the path of the page in the form\n * @param {string} retrievalKey - the retrieval key for the files\n * @param {string} [mimeTypes] - the csv string of accepted mimeTypes\n */\nexport async function initiateUpload(path, retrievalKey, mimeTypes) {\n  const postJsonByType =\n    /** @type {typeof postJson<UploadInitiateResponse>} */ (postJson)\n\n  const payload = {\n    redirect: path,\n    callback: `${submissionUrl}/file`,\n    s3Bucket: uploaderBucketName,\n    s3Path: stagingPrefix,\n    metadata: {\n      retrievalKey\n    },\n    mimeTypes: mimeTypes\n      ?.split(',')\n      .map((type) => type.trim())\n      .filter((type) => type !== '')\n    // maxFileSize: 25 * 1000 * 1000\n  }\n\n  const { payload: initiate } = await postJsonByType(\n    `${uploaderUrl}/initiate`,\n    { payload }\n  )\n\n  return initiate\n}\n\n/**\n * Get the status of a CDP file upload\n * @param {string} uploadId - the ID of the upload\n */\nexport async function getUploadStatus(uploadId) {\n  const getJsonByType = /** @type {typeof getJson<UploadStatusResponse>} */ (\n    getJson\n  )\n\n  const { payload: status } = await getJsonByType(\n    `${uploaderUrl}/status/${uploadId}`\n  )\n\n  return status\n}\n\n/**\n * @import { UploadInitiateResponse, UploadStatusResponse } from '~/src/server/plugins/engine/types.js'\n */\n"],"mappings":"AAAA,SAASA,MAAM;AACf,SAASC,OAAO,EAAEC,QAAQ;AAE1B,MAAMC,WAAW,GAAGH,MAAM,CAACI,GAAG,CAAC,aAAa,CAAC;AAC7C,MAAMC,aAAa,GAAGL,MAAM,CAACI,GAAG,CAAC,eAAe,CAAC;AACjD,MAAME,kBAAkB,GAAGN,MAAM,CAACI,GAAG,CAAC,oBAAoB,CAAC;AAC3D,MAAMG,aAAa,GAAGP,MAAM,CAACI,GAAG,CAAC,eAAe,CAAC;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeI,cAAcA,CAACC,IAAI,EAAEC,YAAY,EAAEC,SAAS,EAAE;EAClE,MAAMC,cAAc,GAClB,sDAAwDV,QAAS;EAEnE,MAAMW,OAAO,GAAG;IACdC,QAAQ,EAAEL,IAAI;IACdM,QAAQ,EAAE,GAAGV,aAAa,OAAO;IACjCW,QAAQ,EAAEV,kBAAkB;IAC5BW,MAAM,EAAEV,aAAa;IACrBW,QAAQ,EAAE;MACRR;IACF,CAAC;IACDC,SAAS,EAAEA,SAAS,EAChBQ,KAAK,CAAC,GAAG,CAAC,CACXC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAC1BC,MAAM,CAAEF,IAAI,IAAKA,IAAI,KAAK,EAAE;IAC/B;EACF,CAAC;EAED,MAAM;IAAER,OAAO,EAAEW;EAAS,CAAC,GAAG,MAAMZ,cAAc,CAChD,GAAGT,WAAW,WAAW,EACzB;IAAEU;EAAQ,CACZ,CAAC;EAED,OAAOW,QAAQ;AACjB;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAeC,eAAeA,CAACC,QAAQ,EAAE;EAC9C,MAAMC,aAAa,GAAG;EACpB1B,OACD;EAED,MAAM;IAAEY,OAAO,EAAEe;EAAO,CAAC,GAAG,MAAMD,aAAa,CAC7C,GAAGxB,WAAW,WAAWuB,QAAQ,EACnC,CAAC;EAED,OAAOE,MAAM;AACf;;AAEA;AACA;AACA","ignoreList":[]}