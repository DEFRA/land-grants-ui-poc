{"version":3,"file":"types.js","names":["UploadStatus","FileStatus"],"sources":["../../../../src/server/plugins/engine/types.ts"],"sourcesContent":["import { type Item } from '@defra/forms-model'\nimport { type ValidationErrorItem } from 'joi'\n\nimport { type FormComponent } from '~/src/server/plugins/engine/components/FormComponent.js'\nimport {\n  type BackLink,\n  type ComponentText,\n  type ComponentViewModel\n} from '~/src/server/plugins/engine/components/types.js'\nimport { type PageController } from '~/src/server/plugins/engine/pageControllers/PageController.js'\nimport { type PageControllerClass } from '~/src/server/plugins/engine/pageControllers/helpers.js'\nimport { type ViewContext } from '~/src/server/plugins/nunjucks/types.js'\nimport { type FormAction, type FormRequest } from '~/src/server/routes/types.js'\n\n/**\n * Form submission state stores the following in Redis:\n * Props containing user's submitted values as `{ [inputId]: value }` or as `{ [sectionName]: { [inputName]: value } }`\n *   a) . e.g:\n * ```ts\n *     {\n *       _C9PRHmsgt: 'Ben',\n *       WfLk9McjzX: 'Music',\n *       IK7jkUFCBL: 'Royal Academy of Music'\n *     }\n * ```\n *\n *   b)\n * ```ts\n *   {\n *         checkBeforeYouStart: { ukPassport: true },\n *         applicantDetails: {\n *           numberOfApplicants: 1,\n *           phoneNumber: '77777777',\n *           emailAddress: 'aaa@aaa.com'\n *         },\n *         applicantOneDetails: {\n *           firstName: 'a',\n *           middleName: 'a',\n *           lastName: 'a',\n *           address: { addressLine1: 'a', addressLine2: 'a', town: 'a', postcode: 'a' }\n *         }\n *     }\n * ```\n */\n\n/**\n * Form submission state\n */\nexport type FormSubmissionState = {\n  upload?: Record<string, TempFileState>\n} & FormState\n\nexport interface FormSubmissionError\n  extends Pick<ValidationErrorItem, 'context' | 'path'> {\n  href: string // e.g: '#dateField__day'\n  name: string // e.g: 'dateField__day'\n  text: string // e.g: 'Date field must be a real date'\n}\n\nexport interface FormParams {\n  action?: FormAction\n  confirm?: true\n  crumb?: string\n  itemId?: string\n}\n\n/**\n * Form POST for question pages\n * (after Joi has converted value types)\n */\nexport type FormPayload = FormParams & Partial<Record<string, FormValue>>\n\nexport type FormValue =\n  | Item['value']\n  | Item['value'][]\n  | UploadState\n  | RepeatListState\n  | undefined\n\nexport type FormState = Partial<Record<string, FormStateValue>>\nexport type FormStateValue = Exclude<FormValue, undefined> | null\n\nexport interface FormValidationResult<\n  ValueType extends FormPayload | FormSubmissionState\n> {\n  value: ValueType\n  errors: FormSubmissionError[] | undefined\n}\n\nexport interface FormContext {\n  /**\n   * Evaluation form state only (filtered by visited paths),\n   * with values formatted for condition evaluation using\n   * {@link FormComponent.getContextValueFromState}\n   */\n  evaluationState: FormState\n\n  /**\n   * Relevant form state only (filtered by visited paths)\n   */\n  relevantState: FormState\n\n  /**\n   * Relevant pages only (filtered by visited paths)\n   */\n  relevantPages: PageControllerClass[]\n\n  /**\n   * Form submission payload (single page)\n   */\n  payload: FormPayload\n\n  /**\n   * Form submission state (entire form)\n   */\n  state: FormSubmissionState\n\n  /**\n   * Validation errors (entire form)\n   */\n  errors?: FormSubmissionError[]\n\n  /**\n   * Visited paths evaluated from form state\n   */\n  paths: string[]\n\n  // Preview URL direct access is allowed\n  isForceAccess: boolean\n}\n\nexport type FormContextRequest = (\n  | {\n      method: 'get'\n      payload?: undefined\n    }\n  | {\n      method: 'post'\n      payload: FormPayload\n    }\n  | {\n      method: FormRequest['method']\n      payload?: object | undefined\n    }\n) &\n  Pick<FormRequest, 'app' | 'method' | 'params' | 'path' | 'query' | 'url'>\n\nexport interface UploadInitiateResponse {\n  uploadId: string\n  uploadUrl: string\n  statusUrl: string\n}\n\nexport enum UploadStatus {\n  initiated = 'initiated',\n  pending = 'pending',\n  ready = 'ready'\n}\n\nexport enum FileStatus {\n  complete = 'complete',\n  rejected = 'rejected',\n  pending = 'pending'\n}\n\nexport type UploadState = FileState[]\n\nexport type FileUpload = {\n  fileId: string\n  filename: string\n  contentLength: number\n} & (\n  | {\n      fileStatus: FileStatus.complete | FileStatus.rejected | FileStatus.pending\n      errorMessage?: string\n    }\n  | {\n      fileStatus: FileStatus.complete\n      errorMessage?: undefined\n    }\n)\n\nexport interface FileUploadMetadata {\n  retrievalKey: string\n}\n\nexport type UploadStatusResponse =\n  | {\n      uploadStatus: UploadStatus.initiated\n      metadata: FileUploadMetadata\n      form: { file?: undefined }\n    }\n  | {\n      uploadStatus: UploadStatus.pending | UploadStatus.ready\n      metadata: FileUploadMetadata\n      form: { file: FileUpload }\n      numberOfRejectedFiles?: number\n    }\n  | {\n      uploadStatus: UploadStatus.ready\n      metadata: FileUploadMetadata\n      form: { file: FileUpload }\n      numberOfRejectedFiles: 0\n    }\n\nexport type UploadStatusFileResponse = Exclude<\n  UploadStatusResponse,\n  { uploadStatus: UploadStatus.initiated }\n>\n\nexport interface FileState {\n  uploadId: string\n  status: UploadStatusFileResponse\n}\n\nexport interface TempFileState {\n  upload?: UploadInitiateResponse\n  files: UploadState\n}\n\nexport interface RepeatItemState extends FormPayload {\n  itemId: string\n}\n\nexport type RepeatListState = RepeatItemState[]\n\nexport interface CheckAnswers {\n  title?: ComponentText\n  summaryList: SummaryList\n}\n\nexport interface SummaryList {\n  classes?: string\n  rows: SummaryListRow[]\n}\n\nexport interface SummaryListRow {\n  key: ComponentText\n  value: ComponentText\n  actions?: { items: SummaryListAction[] }\n}\n\nexport type SummaryListAction = ComponentText & {\n  href: string\n  visuallyHiddenText: string\n}\n\nexport interface PageViewModelBase extends Partial<ViewContext> {\n  page: PageController\n  name?: string\n  pageTitle: string\n  sectionTitle?: string\n  showTitle: boolean\n  isStartPage: boolean\n  backLink?: BackLink\n  feedbackLink?: string\n  serviceUrl: string\n  phaseTag?: string\n}\n\nexport interface ItemDeletePageViewModel extends PageViewModelBase {\n  context: FormContext\n  itemTitle: string\n  confirmation?: ComponentText\n  buttonConfirm: ComponentText\n  buttonCancel: ComponentText\n}\n\nexport interface FormPageViewModel extends PageViewModelBase {\n  components: ComponentViewModel[]\n  context: FormContext\n  errors?: FormSubmissionError[]\n  hasMissingNotificationEmail?: boolean\n}\n\nexport interface RepeaterSummaryPageViewModel extends PageViewModelBase {\n  context: FormContext\n  errors?: FormSubmissionError[]\n  checkAnswers: CheckAnswers[]\n  repeatTitle: string\n}\n\nexport interface FeaturedFormPageViewModel extends FormPageViewModel {\n  formAction?: string\n  formComponent: ComponentViewModel\n  componentsBefore: ComponentViewModel[]\n}\n\nexport type PageViewModel =\n  | PageViewModelBase\n  | ItemDeletePageViewModel\n  | FormPageViewModel\n  | RepeaterSummaryPageViewModel\n  | FeaturedFormPageViewModel\n"],"mappings":"AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAmBA;AACA;AACA;AACA;;AAoFA,WAAYA,YAAY,0BAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAA,OAAZA,YAAY;AAAA;AAMxB,WAAYC,UAAU,0BAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA","ignoreList":[]}