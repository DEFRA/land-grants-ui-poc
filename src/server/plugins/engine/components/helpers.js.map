{"version":3,"file":"helpers.js","names":["ComponentType","Marked","config","ListFormComponent","Components","designerUrl","get","markdown","breaks","gfm","extensions","name","renderer","tokens","text","parser","parseInline","length","walkTokens","token","includes","type","createComponent","def","options","component","AutocompleteField","CheckboxesField","DatePartsField","Details","EmailAddressField","Html","InsetText","List","MultilineTextField","NumberField","RadiosField","SelectField","TelephoneNumberField","TextField","UkAddressField","YesNoField","MonthYearField","FileUploadField","Error","getAnswer","field","state","format","getAnswerMarkdown","context","getContextValueFromState","toString","parse","async","trim","getDisplayStringFromState","answer","answerEscaped","escapeMarkdown","files","getFormValueFromState","map","status","file","form","filename","fileId","join","values","flat","items","filter","value","item","label","line","toLowerCase","split","concat","punctuation","character","replaceAll","addClassOptionIfNone","className","classes"],"sources":["../../../../../src/server/plugins/engine/components/helpers.ts"],"sourcesContent":["import { ComponentType, type ComponentDef } from '@defra/forms-model'\nimport { Marked, type Token } from 'marked'\n\nimport { config } from '~/src/config/index.js'\nimport { type ComponentBase } from '~/src/server/plugins/engine/components/ComponentBase.js'\nimport { ListFormComponent } from '~/src/server/plugins/engine/components/ListFormComponent.js'\nimport * as Components from '~/src/server/plugins/engine/components/index.js'\nimport { type FormState } from '~/src/server/plugins/engine/types.js'\n\nconst designerUrl = config.get('designerUrl')\n\nconst markdown = new Marked({\n  breaks: true,\n  gfm: true,\n\n  /**\n   * Render paragraphs without `<p>` wrappers\n   * for check answers summary list `<dd>`\n   */\n  extensions: [\n    {\n      name: 'paragraph',\n      renderer({ tokens = [] }) {\n        const text = this.parser.parseInline(tokens)\n        return tokens.length > 1 ? `${text}<br>` : text\n      }\n    }\n  ],\n\n  /**\n   * Restrict allowed Markdown tokens\n   */\n  walkTokens(token) {\n    const tokens: Token['type'][] = [\n      'br',\n      'escape',\n      'list',\n      'list_item',\n      'paragraph',\n      'space',\n      'text'\n    ]\n\n    if (!tokens.includes(token.type)) {\n      token.type = 'text'\n    }\n  }\n})\n\n// All component instances\nexport type Component = InstanceType<\n  (typeof Components)[keyof typeof Components]\n>\n\n// Field component instances only\nexport type Field = InstanceType<\n  | typeof Components.AutocompleteField\n  | typeof Components.CheckboxesField\n  | typeof Components.DatePartsField\n  | typeof Components.EmailAddressField\n  | typeof Components.MonthYearField\n  | typeof Components.MultilineTextField\n  | typeof Components.NumberField\n  | typeof Components.SelectField\n  | typeof Components.TelephoneNumberField\n  | typeof Components.TextField\n  | typeof Components.UkAddressField\n  | typeof Components.FileUploadField\n>\n\n// Guidance component instances only\nexport type Guidance = InstanceType<\n  | typeof Components.Details\n  | typeof Components.Html\n  | typeof Components.InsetText\n  | typeof Components.List\n>\n\n/**\n * Create field instance for each {@link ComponentDef} type\n */\nexport function createComponent(\n  def: ComponentDef,\n  options: ConstructorParameters<typeof ComponentBase>[1]\n): Component {\n  let component: Component | undefined\n\n  switch (def.type) {\n    case ComponentType.AutocompleteField:\n      component = new Components.AutocompleteField(def, options)\n      break\n\n    case ComponentType.CheckboxesField:\n      component = new Components.CheckboxesField(def, options)\n      break\n\n    case ComponentType.DatePartsField:\n      component = new Components.DatePartsField(def, options)\n      break\n\n    case ComponentType.Details:\n      component = new Components.Details(def, options)\n      break\n\n    case ComponentType.EmailAddressField:\n      component = new Components.EmailAddressField(def, options)\n      break\n\n    case ComponentType.Html:\n      component = new Components.Html(def, options)\n      break\n\n    case ComponentType.InsetText:\n      component = new Components.InsetText(def, options)\n      break\n\n    case ComponentType.List:\n      component = new Components.List(def, options)\n      break\n\n    case ComponentType.MultilineTextField:\n      component = new Components.MultilineTextField(def, options)\n      break\n\n    case ComponentType.NumberField:\n      component = new Components.NumberField(def, options)\n      break\n\n    case ComponentType.RadiosField:\n      component = new Components.RadiosField(def, options)\n      break\n\n    case ComponentType.SelectField:\n      component = new Components.SelectField(def, options)\n      break\n\n    case ComponentType.TelephoneNumberField:\n      component = new Components.TelephoneNumberField(def, options)\n      break\n\n    case ComponentType.TextField:\n      component = new Components.TextField(def, options)\n      break\n\n    case ComponentType.UkAddressField:\n      component = new Components.UkAddressField(def, options)\n      break\n\n    case ComponentType.YesNoField:\n      component = new Components.YesNoField(def, options)\n      break\n\n    case ComponentType.MonthYearField:\n      component = new Components.MonthYearField(def, options)\n      break\n\n    case ComponentType.FileUploadField:\n      component = new Components.FileUploadField(def, options)\n      break\n  }\n\n  if (typeof component === 'undefined') {\n    throw new Error(`Component type ${def.type} does not exist`)\n  }\n\n  return component\n}\n\n/**\n * Get formatted answer for a field\n */\nexport function getAnswer(\n  field: Field,\n  state: FormState,\n  options: {\n    format:\n      | 'data' // Submission data\n      | 'email' // GOV.UK Notify emails\n      | 'summary' // Check answers summary\n  } = { format: 'summary' }\n) {\n  // Use escaped display text for GOV.UK Notify emails\n  if (options.format === 'email') {\n    return getAnswerMarkdown(field, state, { format: 'email' })\n  }\n\n  // Use context value for submission data\n  if (options.format === 'data') {\n    const context = field.getContextValueFromState(state)\n    return context?.toString() ?? ''\n  }\n\n  // Use display HTML for check answers summary (multi line)\n  if (\n    field instanceof ListFormComponent ||\n    field instanceof Components.MultilineTextField ||\n    field instanceof Components.UkAddressField\n  ) {\n    return markdown\n      .parse(getAnswerMarkdown(field, state), { async: false })\n      .trim()\n  }\n\n  // Use display text for check answers summary (single line)\n  return field.getDisplayStringFromState(state)\n}\n\n/**\n * Get formatted answer for a field (Markdown only)\n */\nexport function getAnswerMarkdown(\n  field: Field,\n  state: FormState,\n  options: {\n    format:\n      | 'email' // GOV.UK Notify emails\n      | 'summary' // Check answers summary\n  } = { format: 'summary' }\n) {\n  const answer = field.getDisplayStringFromState(state)\n\n  // Use escaped display text\n  let answerEscaped = `${escapeMarkdown(answer)}\\n`\n\n  if (field instanceof Components.FileUploadField) {\n    const files = field.getFormValueFromState(state)\n\n    // Skip empty files\n    if (!files?.length) {\n      return answerEscaped\n    }\n\n    answerEscaped = `${escapeMarkdown(answer)}:\\n\\n`\n\n    // Append bullet points\n    answerEscaped += files\n      .map(({ status }) => {\n        const { file } = status.form\n        const filename = escapeMarkdown(file.filename)\n        return `* [${filename}](${designerUrl}/file-download/${file.fileId})\\n`\n      })\n      .join('')\n  } else if (field instanceof ListFormComponent) {\n    const values = [field.getContextValueFromState(state)].flat()\n    const items = field.items.filter(({ value }) => values.includes(value))\n\n    // Skip empty values\n    if (!items.length) {\n      return answerEscaped\n    }\n\n    answerEscaped = ''\n\n    // Append bullet points\n    answerEscaped += items\n      .map((item) => {\n        const label = escapeMarkdown(item.text)\n        const value = escapeMarkdown(`(${item.value})`)\n\n        let line = label\n\n        // Prepend bullet points for checkboxes only\n        if (field instanceof Components.CheckboxesField) {\n          line = `* ${line}`\n        }\n\n        // Append raw values in parentheses\n        // e.g. `* None of the above (false)`\n        return options.format === 'email' &&\n          `${item.value}`.toLowerCase() !== item.text.toLowerCase()\n          ? `${line} ${value}\\n`\n          : `${line}\\n`\n      })\n      .join('')\n  } else if (field instanceof Components.MultilineTextField) {\n    // Preserve Multiline text new lines\n    answerEscaped = answer\n      .split(/\\r?\\n/)\n      .map(escapeMarkdown)\n      .join('\\n')\n      .concat('\\n')\n  } else if (field instanceof Components.UkAddressField) {\n    // Format UK addresses into new lines\n    answerEscaped = (field.getContextValueFromState(state) ?? [])\n      .map(escapeMarkdown)\n      .join('\\n')\n      .concat('\\n')\n  }\n\n  return answerEscaped\n}\n\n/**\n * Prevent Markdown formatting\n * @see {@link https://pandoc.org/chunkedhtml-demo/8.11-backslash-escapes.html}\n */\nexport function escapeMarkdown(answer: string) {\n  const punctuation = [\n    '`',\n    \"'\",\n    '*',\n    '_',\n    '{',\n    '}',\n    '[',\n    ']',\n    '(',\n    ')',\n    '#',\n    '+',\n    '-',\n    '.',\n    '!'\n  ]\n\n  for (const character of punctuation) {\n    answer = answer.toString().replaceAll(character, `\\\\${character}`)\n  }\n\n  return answer\n}\n\nexport const addClassOptionIfNone = (\n  options: Extract<ComponentDef, { options: { classes?: string } }>['options'],\n  className: string\n) => {\n  if (!options.classes) {\n    options.classes = className\n  }\n}\n"],"mappings":"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","ignoreList":[]}