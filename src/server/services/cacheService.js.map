{"version":3,"file":"cacheService.js","names":["Hoek","config","partition","ADDITIONAL_IDENTIFIER","CacheService","cache","logger","constructor","server","segment","getState","request","cached","get","Key","setState","state","key","ttl","set","getConfirmationState","Confirmation","value","setConfirmationState","confirmationState","clearState","yar","id","drop","additionalIdentifier","Error","params","slug","merge","update","mergeArrays"],"sources":["../../../src/server/services/cacheService.ts"],"sourcesContent":["import { type Request, type Server } from '@hapi/hapi'\nimport * as Hoek from '@hapi/hoek'\n\nimport { config } from '~/src/config/index.js'\nimport { type createServer } from '~/src/server/index.js'\nimport {\n  type FormPayload,\n  type FormState,\n  type FormSubmissionState\n} from '~/src/server/plugins/engine/types.js'\nimport {\n  type FormRequest,\n  type FormRequestPayload\n} from '~/src/server/routes/types.js'\n\nconst partition = 'cache'\n\nenum ADDITIONAL_IDENTIFIER {\n  Confirmation = ':confirmation'\n}\n\nexport class CacheService {\n  /**\n   * This service is responsible for getting, storing or deleting a user's session data in the cache. This service has been registered by {@link createServer}\n   */\n  cache\n  logger: Server['logger']\n\n  constructor(server: Server) {\n    this.cache = server.cache({ cache: 'session', segment: 'formSubmission' })\n    this.logger = server.logger\n  }\n\n  async getState(\n    request: Request | FormRequest | FormRequestPayload\n  ): Promise<FormSubmissionState> {\n    const cached = await this.cache.get(this.Key(request))\n\n    return cached || {}\n  }\n\n  async setState(\n    request: FormRequest | FormRequestPayload,\n    state: FormSubmissionState\n  ) {\n    const key = this.Key(request)\n    const ttl = config.get('sessionTimeout')\n\n    await this.cache.set(key, state, ttl)\n    return this.getState(request)\n  }\n\n  async getConfirmationState(\n    request: FormRequest | FormRequestPayload\n  ): Promise<{ confirmed?: true }> {\n    const key = this.Key(request, ADDITIONAL_IDENTIFIER.Confirmation)\n    const value = await this.cache.get(key)\n\n    return value || {}\n  }\n\n  async setConfirmationState(\n    request: FormRequest | FormRequestPayload,\n    confirmationState: { confirmed?: true }\n  ) {\n    const key = this.Key(request, ADDITIONAL_IDENTIFIER.Confirmation)\n    const ttl = config.get('confirmationSessionTimeout')\n\n    return this.cache.set(key, confirmationState, ttl)\n  }\n\n  async clearState(request: FormRequest | FormRequestPayload) {\n    if (request.yar.id) {\n      await this.cache.drop(this.Key(request))\n    }\n  }\n\n  /**\n   * The key used to store user session data against.\n   * If there are multiple forms on the same runner instance, for example `form-a` and `form-a-feedback` this will prevent CacheService from clearing data from `form-a` if a user gave feedback before they finished `form-a`\n   * @param request - hapi request object\n   * @param additionalIdentifier - appended to the id\n   */\n  Key(\n    request: Request | FormRequest | FormRequestPayload,\n    additionalIdentifier?: ADDITIONAL_IDENTIFIER\n  ) {\n    if (!request.yar.id) {\n      throw Error('No session ID found')\n    }\n    return {\n      segment: partition,\n      id: `${request.yar.id}:${request.params.state ?? ''}:${request.params.slug ?? ''}:${additionalIdentifier ?? ''}`\n    }\n  }\n}\n\n/**\n * State merge helper\n * 1. Merges objects (form fields)\n * 2. Overwrites arrays\n */\nexport function merge<StateType extends FormState | FormPayload>(\n  state: StateType,\n  update: object\n): StateType {\n  return Hoek.merge(state, update, {\n    mergeArrays: false\n  })\n}\n"],"mappings":"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","ignoreList":[]}